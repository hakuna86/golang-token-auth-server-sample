// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Article is the model entity for the Article schema.
type Article struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Star holds the value of the "star" field.
	Star int `json:"star,omitempty"`
}

// FromRows scans the sql response data into Article.
func (a *Article) FromRows(rows *sql.Rows) error {
	var scana struct {
		ID        int
		CreatedAt sql.NullTime
		UpdatedAt sql.NullTime
		Title     sql.NullString
		Body      sql.NullString
		Star      sql.NullInt64
	}
	// the order here should be the same as in the `article.Columns`.
	if err := rows.Scan(
		&scana.ID,
		&scana.CreatedAt,
		&scana.UpdatedAt,
		&scana.Title,
		&scana.Body,
		&scana.Star,
	); err != nil {
		return err
	}
	a.ID = scana.ID
	a.CreatedAt = scana.CreatedAt.Time
	a.UpdatedAt = scana.UpdatedAt.Time
	a.Title = scana.Title.String
	a.Body = scana.Body.String
	a.Star = int(scana.Star.Int64)
	return nil
}

// QueryUser queries the user edge of the Article.
func (a *Article) QueryUser() *UserQuery {
	return (&ArticleClient{a.config}).QueryUser(a)
}

// Update returns a builder for updating this Article.
// Note that, you need to call Article.Unwrap() before calling this method, if this Article
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Article) Update() *ArticleUpdateOne {
	return (&ArticleClient{a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Article) Unwrap() *Article {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Article is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Article) String() string {
	var builder strings.Builder
	builder.WriteString("Article(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", body=")
	builder.WriteString(a.Body)
	builder.WriteString(", star=")
	builder.WriteString(fmt.Sprintf("%v", a.Star))
	builder.WriteByte(')')
	return builder.String()
}

// Articles is a parsable slice of Article.
type Articles []*Article

// FromRows scans the sql response data into Articles.
func (a *Articles) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scana := &Article{}
		if err := scana.FromRows(rows); err != nil {
			return err
		}
		*a = append(*a, scana)
	}
	return nil
}

func (a Articles) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
