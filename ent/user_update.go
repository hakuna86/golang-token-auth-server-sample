// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/hakuna86/golang-token-auth-server-sample/ent/article"
	"github.com/hakuna86/golang-token-auth-server-sample/ent/auth"
	"github.com/hakuna86/golang-token-auth-server-sample/ent/predicate"
	"github.com/hakuna86/golang-token-auth-server-sample/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config

	updated_at      *time.Time
	email           *string
	username        *string
	password        *string
	role            *string
	auth            map[int]struct{}
	articles        map[int]struct{}
	clearedAuth     bool
	removedArticles map[int]struct{}
	predicates      []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetUpdatedAt sets the updated_at field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.updated_at = &t
	return uu
}

// SetEmail sets the email field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.email = &s
	return uu
}

// SetUsername sets the username field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.username = &s
	return uu
}

// SetPassword sets the password field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.password = &s
	return uu
}

// SetRole sets the role field.
func (uu *UserUpdate) SetRole(s string) *UserUpdate {
	uu.role = &s
	return uu
}

// SetAuthID sets the auth edge to Auth by id.
func (uu *UserUpdate) SetAuthID(id int) *UserUpdate {
	if uu.auth == nil {
		uu.auth = make(map[int]struct{})
	}
	uu.auth[id] = struct{}{}
	return uu
}

// SetNillableAuthID sets the auth edge to Auth by id if the given value is not nil.
func (uu *UserUpdate) SetNillableAuthID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetAuthID(*id)
	}
	return uu
}

// SetAuth sets the auth edge to Auth.
func (uu *UserUpdate) SetAuth(a *Auth) *UserUpdate {
	return uu.SetAuthID(a.ID)
}

// AddArticleIDs adds the articles edge to Article by ids.
func (uu *UserUpdate) AddArticleIDs(ids ...int) *UserUpdate {
	if uu.articles == nil {
		uu.articles = make(map[int]struct{})
	}
	for i := range ids {
		uu.articles[ids[i]] = struct{}{}
	}
	return uu
}

// AddArticles adds the articles edges to Article.
func (uu *UserUpdate) AddArticles(a ...*Article) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddArticleIDs(ids...)
}

// ClearAuth clears the auth edge to Auth.
func (uu *UserUpdate) ClearAuth() *UserUpdate {
	uu.clearedAuth = true
	return uu
}

// RemoveArticleIDs removes the articles edge to Article by ids.
func (uu *UserUpdate) RemoveArticleIDs(ids ...int) *UserUpdate {
	if uu.removedArticles == nil {
		uu.removedArticles = make(map[int]struct{})
	}
	for i := range ids {
		uu.removedArticles[ids[i]] = struct{}{}
	}
	return uu
}

// RemoveArticles removes articles edges to Article.
func (uu *UserUpdate) RemoveArticles(a ...*Article) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveArticleIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if uu.updated_at == nil {
		v := user.UpdateDefaultUpdatedAt()
		uu.updated_at = &v
	}
	if len(uu.auth) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"auth\"")
	}
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(uu.driver.Dialect())
		selector = builder.Select(user.FieldID).From(builder.Table(user.Table))
	)
	for _, p := range uu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := uu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(user.Table)
	)
	updater = updater.Where(sql.InInts(user.FieldID, ids...))
	if value := uu.updated_at; value != nil {
		updater.Set(user.FieldUpdatedAt, *value)
	}
	if value := uu.email; value != nil {
		updater.Set(user.FieldEmail, *value)
	}
	if value := uu.username; value != nil {
		updater.Set(user.FieldUsername, *value)
	}
	if value := uu.password; value != nil {
		updater.Set(user.FieldPassword, *value)
	}
	if value := uu.role; value != nil {
		updater.Set(user.FieldRole, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if uu.clearedAuth {
		query, args := builder.Update(user.AuthTable).
			SetNull(user.AuthColumn).
			Where(sql.InInts(auth.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(uu.auth) > 0 {
		for _, id := range ids {
			eid := keys(uu.auth)[0]
			query, args := builder.Update(user.AuthTable).
				Set(user.AuthColumn, id).
				Where(sql.EQ(auth.FieldID, eid).And().IsNull(user.AuthColumn)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(uu.auth) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"auth\" %v already connected to a different \"User\"", keys(uu.auth))})
			}
		}
	}
	if len(uu.removedArticles) > 0 {
		eids := make([]int, len(uu.removedArticles))
		for eid := range uu.removedArticles {
			eids = append(eids, eid)
		}
		query, args := builder.Update(user.ArticlesTable).
			SetNull(user.ArticlesColumn).
			Where(sql.InInts(user.ArticlesColumn, ids...)).
			Where(sql.InInts(article.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(uu.articles) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range uu.articles {
				p.Or().EQ(article.FieldID, eid)
			}
			query, args := builder.Update(user.ArticlesTable).
				Set(user.ArticlesColumn, id).
				Where(sql.And(p, sql.IsNull(user.ArticlesColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(uu.articles) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"articles\" %v already connected to a different \"User\"", keys(uu.articles))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id int

	updated_at      *time.Time
	email           *string
	username        *string
	password        *string
	role            *string
	auth            map[int]struct{}
	articles        map[int]struct{}
	clearedAuth     bool
	removedArticles map[int]struct{}
}

// SetUpdatedAt sets the updated_at field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.updated_at = &t
	return uuo
}

// SetEmail sets the email field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.email = &s
	return uuo
}

// SetUsername sets the username field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.username = &s
	return uuo
}

// SetPassword sets the password field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.password = &s
	return uuo
}

// SetRole sets the role field.
func (uuo *UserUpdateOne) SetRole(s string) *UserUpdateOne {
	uuo.role = &s
	return uuo
}

// SetAuthID sets the auth edge to Auth by id.
func (uuo *UserUpdateOne) SetAuthID(id int) *UserUpdateOne {
	if uuo.auth == nil {
		uuo.auth = make(map[int]struct{})
	}
	uuo.auth[id] = struct{}{}
	return uuo
}

// SetNillableAuthID sets the auth edge to Auth by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAuthID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetAuthID(*id)
	}
	return uuo
}

// SetAuth sets the auth edge to Auth.
func (uuo *UserUpdateOne) SetAuth(a *Auth) *UserUpdateOne {
	return uuo.SetAuthID(a.ID)
}

// AddArticleIDs adds the articles edge to Article by ids.
func (uuo *UserUpdateOne) AddArticleIDs(ids ...int) *UserUpdateOne {
	if uuo.articles == nil {
		uuo.articles = make(map[int]struct{})
	}
	for i := range ids {
		uuo.articles[ids[i]] = struct{}{}
	}
	return uuo
}

// AddArticles adds the articles edges to Article.
func (uuo *UserUpdateOne) AddArticles(a ...*Article) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddArticleIDs(ids...)
}

// ClearAuth clears the auth edge to Auth.
func (uuo *UserUpdateOne) ClearAuth() *UserUpdateOne {
	uuo.clearedAuth = true
	return uuo
}

// RemoveArticleIDs removes the articles edge to Article by ids.
func (uuo *UserUpdateOne) RemoveArticleIDs(ids ...int) *UserUpdateOne {
	if uuo.removedArticles == nil {
		uuo.removedArticles = make(map[int]struct{})
	}
	for i := range ids {
		uuo.removedArticles[ids[i]] = struct{}{}
	}
	return uuo
}

// RemoveArticles removes articles edges to Article.
func (uuo *UserUpdateOne) RemoveArticles(a ...*Article) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveArticleIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if uuo.updated_at == nil {
		v := user.UpdateDefaultUpdatedAt()
		uuo.updated_at = &v
	}
	if len(uuo.auth) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"auth\"")
	}
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	var (
		builder  = sql.Dialect(uuo.driver.Dialect())
		selector = builder.Select(user.Columns...).From(builder.Table(user.Table))
	)
	user.ID(uuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = uuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		u = &User{config: uuo.config}
		if err := u.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into User: %v", err)
		}
		id = u.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("User with id: %v", uuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one User with the same id: %v", uuo.id)
	}

	tx, err := uuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(user.Table)
	)
	updater = updater.Where(sql.InInts(user.FieldID, ids...))
	if value := uuo.updated_at; value != nil {
		updater.Set(user.FieldUpdatedAt, *value)
		u.UpdatedAt = *value
	}
	if value := uuo.email; value != nil {
		updater.Set(user.FieldEmail, *value)
		u.Email = *value
	}
	if value := uuo.username; value != nil {
		updater.Set(user.FieldUsername, *value)
		u.Username = *value
	}
	if value := uuo.password; value != nil {
		updater.Set(user.FieldPassword, *value)
		u.Password = *value
	}
	if value := uuo.role; value != nil {
		updater.Set(user.FieldRole, *value)
		u.Role = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if uuo.clearedAuth {
		query, args := builder.Update(user.AuthTable).
			SetNull(user.AuthColumn).
			Where(sql.InInts(auth.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(uuo.auth) > 0 {
		for _, id := range ids {
			eid := keys(uuo.auth)[0]
			query, args := builder.Update(user.AuthTable).
				Set(user.AuthColumn, id).
				Where(sql.EQ(auth.FieldID, eid).And().IsNull(user.AuthColumn)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(uuo.auth) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"auth\" %v already connected to a different \"User\"", keys(uuo.auth))})
			}
		}
	}
	if len(uuo.removedArticles) > 0 {
		eids := make([]int, len(uuo.removedArticles))
		for eid := range uuo.removedArticles {
			eids = append(eids, eid)
		}
		query, args := builder.Update(user.ArticlesTable).
			SetNull(user.ArticlesColumn).
			Where(sql.InInts(user.ArticlesColumn, ids...)).
			Where(sql.InInts(article.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(uuo.articles) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range uuo.articles {
				p.Or().EQ(article.FieldID, eid)
			}
			query, args := builder.Update(user.ArticlesTable).
				Set(user.ArticlesColumn, id).
				Where(sql.And(p, sql.IsNull(user.ArticlesColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(uuo.articles) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"articles\" %v already connected to a different \"User\"", keys(uuo.articles))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return u, nil
}
