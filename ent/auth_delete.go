// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/hakuna86/golang-token-auth-server-sample/ent/auth"
	"github.com/hakuna86/golang-token-auth-server-sample/ent/predicate"
)

// AuthDelete is the builder for deleting a Auth entity.
type AuthDelete struct {
	config
	predicates []predicate.Auth
}

// Where adds a new predicate to the delete builder.
func (ad *AuthDelete) Where(ps ...predicate.Auth) *AuthDelete {
	ad.predicates = append(ad.predicates, ps...)
	return ad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ad *AuthDelete) Exec(ctx context.Context) (int, error) {
	return ad.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (ad *AuthDelete) ExecX(ctx context.Context) int {
	n, err := ad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ad *AuthDelete) sqlExec(ctx context.Context) (int, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(ad.driver.Dialect())
	)
	selector := builder.Select().From(sql.Table(auth.Table))
	for _, p := range ad.predicates {
		p(selector)
	}
	query, args := builder.Delete(auth.Table).FromSelect(selector).Query()
	if err := ad.driver.Exec(ctx, query, args, &res); err != nil {
		return 0, err
	}
	affected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	return int(affected), nil
}

// AuthDeleteOne is the builder for deleting a single Auth entity.
type AuthDeleteOne struct {
	ad *AuthDelete
}

// Exec executes the deletion query.
func (ado *AuthDeleteOne) Exec(ctx context.Context) error {
	n, err := ado.ad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{auth.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ado *AuthDeleteOne) ExecX(ctx context.Context) {
	ado.ad.ExecX(ctx)
}
