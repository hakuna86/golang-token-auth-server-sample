// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/hakuna86/golang-token-auth-server-sample/ent/article"
)

// ArticleCreate is the builder for creating a Article entity.
type ArticleCreate struct {
	config
	created_at *time.Time
	updated_at *time.Time
	title      *string
	body       *string
	star       *int
	user       map[int]struct{}
}

// SetCreatedAt sets the created_at field.
func (ac *ArticleCreate) SetCreatedAt(t time.Time) *ArticleCreate {
	ac.created_at = &t
	return ac
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ac *ArticleCreate) SetNillableCreatedAt(t *time.Time) *ArticleCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the updated_at field.
func (ac *ArticleCreate) SetUpdatedAt(t time.Time) *ArticleCreate {
	ac.updated_at = &t
	return ac
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ac *ArticleCreate) SetNillableUpdatedAt(t *time.Time) *ArticleCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetTitle sets the title field.
func (ac *ArticleCreate) SetTitle(s string) *ArticleCreate {
	ac.title = &s
	return ac
}

// SetBody sets the body field.
func (ac *ArticleCreate) SetBody(s string) *ArticleCreate {
	ac.body = &s
	return ac
}

// SetStar sets the star field.
func (ac *ArticleCreate) SetStar(i int) *ArticleCreate {
	ac.star = &i
	return ac
}

// SetUserID sets the user edge to User by id.
func (ac *ArticleCreate) SetUserID(id int) *ArticleCreate {
	if ac.user == nil {
		ac.user = make(map[int]struct{})
	}
	ac.user[id] = struct{}{}
	return ac
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ac *ArticleCreate) SetNillableUserID(id *int) *ArticleCreate {
	if id != nil {
		ac = ac.SetUserID(*id)
	}
	return ac
}

// SetUser sets the user edge to User.
func (ac *ArticleCreate) SetUser(u *User) *ArticleCreate {
	return ac.SetUserID(u.ID)
}

// Save creates the Article in the database.
func (ac *ArticleCreate) Save(ctx context.Context) (*Article, error) {
	if ac.created_at == nil {
		v := article.DefaultCreatedAt()
		ac.created_at = &v
	}
	if ac.updated_at == nil {
		v := article.DefaultUpdatedAt()
		ac.updated_at = &v
	}
	if ac.title == nil {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if ac.body == nil {
		return nil, errors.New("ent: missing required field \"body\"")
	}
	if ac.star == nil {
		return nil, errors.New("ent: missing required field \"star\"")
	}
	if len(ac.user) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	return ac.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArticleCreate) SaveX(ctx context.Context) *Article {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *ArticleCreate) sqlSave(ctx context.Context) (*Article, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(ac.driver.Dialect())
		a       = &Article{config: ac.config}
	)
	tx, err := ac.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(article.Table).Default()
	if value := ac.created_at; value != nil {
		insert.Set(article.FieldCreatedAt, *value)
		a.CreatedAt = *value
	}
	if value := ac.updated_at; value != nil {
		insert.Set(article.FieldUpdatedAt, *value)
		a.UpdatedAt = *value
	}
	if value := ac.title; value != nil {
		insert.Set(article.FieldTitle, *value)
		a.Title = *value
	}
	if value := ac.body; value != nil {
		insert.Set(article.FieldBody, *value)
		a.Body = *value
	}
	if value := ac.star; value != nil {
		insert.Set(article.FieldStar, *value)
		a.Star = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(article.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	a.ID = int(id)
	if len(ac.user) > 0 {
		for eid := range ac.user {
			query, args := builder.Update(article.UserTable).
				Set(article.UserColumn, eid).
				Where(sql.EQ(article.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return a, nil
}
